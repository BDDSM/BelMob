Функция ЗапуститьОбменДанными(UID, ИмяФункции, Параметры = Неопределено) Экспорт
	//Мобильная умеет запускать только одно фоновое за раз
	//Если любое фоновое активно - наше запускать смысла нет
	//Так как можем попасть на индексацию, и задание запустится через 20 минут
	ВсеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Состояние",СостояниеФоновогоЗадания.Активно));
	Если ВсеЗадания.Количество() Тогда Возврат Ложь КонецЕсли;
	
	ФоновыеЗадания.Выполнить(ИмяФункции,Параметры,UID,"Задание от " + ТекущаяДата());
	
	Возврат Истина;
КонецФункции

Процедура СделатьОбмен(ПервыйОбмен = Истина) Экспорт
	ОповещениеПользователяОСобытииОбмена("Начат обмен данными.");
	
	СтрЗапроса = Новый Структура;
	//СтрЗапроса.Вставить("ИнформацияОКонфигурации", ОсновныеФункцииОбмена.ПолучитьИнфуОКонфигурации());	
	//СтрЗапроса.Вставить("ИнформацияПроОбмен", СформироватьПакетОбменаДляСервера());	
	////ОповещениеПользователяОСобытииОбмена("Начало подключения к ЦБ");
	Ответ = СоедниненияСБазой.РезультатОбменаСЦБ(СтрЗапроса);
	//ОповещениеПользователяОСобытииОбмена("Конец подключения к ЦБ:");
	
	ОповещениеПользователяОСобытииОбмена("Получен ответ от сервера");
	
	НачатьТранзакцию();
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ИнформацияОбОбмене = ВыполнитьОбменДанными(Ответ);
		
		Константы.ДатаПоследнегоОбмена.Установить(ТекущаяДата());
		ЗафиксироватьТранзакцию();
		ОповещениеПользователяОСобытииОбмена("Обмен завершен успешно");

	Исключение
		ОтменитьТранзакцию();
		ОписаниеОшибки = ОписаниеОшибки();
		ОповещениеПользователяОСобытииОбмена("Ошибка обмена","Произошла непредвиденная ошибка при загрузке данных!");
		ВызватьИсключение "Ошибка обмена. Произошла непредвиденная ошибка при загрузке данных. " + ОписаниеОшибки;
	КонецПопытки;	
КонецПроцедуры

Процедура ОповещениеПользователяОСобытииОбмена(Этап, Описание = "",Длинное = Ложь)
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Этап;
	Сообщение.ИдентификаторНазначения = Новый УникальныйИдентификатор();
	Сообщение.Сообщить();
КонецПроцедуры

Функция ВыполнитьОбменДанными(Ответ)
	Данные = СоедниненияСБазой.Десериализовать(Ответ).Получить();
	
	Для Каждого Стр Из Данные Цикл
		Для Каждого Пакет Из Стр.Значение Цикл
			ЗагрузкаСправочников(СоедниненияСБазой.Десериализовать(Пакет.Значение), Метаданные.НайтиПоПолномуИмени(Стр.Ключ));	
			ОповещениеПользователяОСобытииОбмена("Загрузка " + Стр.Ключ + "(" + Пакет.Ключ + ")");
		КонецЦикла;
	КонецЦикла;
КонецФункции



Процедура ЗагрузкаРегистровСведений(Данные, ИмяРегистра,УзелРодитель = Неопределено)
	Если УзелРодитель.НомерПринятого = 0 Тогда
		Рег = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		Рег.Загрузить(Данные);
		Рег.Записать(Истина);
	Иначе
		Для Каждого РегСтр Из Данные Цикл
			Если ИмяРегистра = "СостоянияЗаказовКлиентов" Тогда
				Если НЕ ЗначениеЗаполнено(РегСтр.Заказ) Тогда Продолжить КонецЕсли;
			КонецЕсли;
			Рег = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Рег,РегСтр);
			Рег.Записать();
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры
Функция ЗагрузкаСправочников(ЭлСтр, ТипСпр,УзелРодитель = Неопределено)
	#Область ПодготовкаКЗагрузкеСправочников			
	СтрРеквизитов = Новый Соответствие;
	СтрРекЭлемента = "";
	СтрРекГруппы = "";
	Для Каждого Рек Из ТипСпр.Реквизиты Цикл
		Если Рек.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента И ЭлСтр.Колонки.Найти(Рек.Имя) <> Неопределено Тогда
			СтрРекЭлемента = СтрРекЭлемента + Рек.Имя + ",";	
		ИначеЕсли Рек.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы И ЭлСтр.Колонки.Найти(Рек.Имя) <> Неопределено  Тогда
			СтрРекГруппы = СтрРекГруппы + Рек.Имя + ",";
		ИначеЕсли ЭлСтр.Колонки.Найти(Рек.Имя) <> Неопределено Тогда	
			СтрРекЭлемента = СтрРекЭлемента + Рек.Имя + ",";
			СтрРекГруппы = СтрРекГруппы + Рек.Имя + ",";
		КонецЕсли;
	КонецЦикла;
	Для Каждого Рек Из ТипСпр.СтандартныеРеквизиты Цикл
		Если ЭлСтр.Колонки.Найти(Рек.Имя) <> Неопределено И НЕ Рек.Имя = "Ссылка" И НЕ Рек.Имя = "ЭтоГруппа" Тогда
			СтрРекЭлемента = СтрРекЭлемента + Рек.Имя + ",";
			СтрРекГруппы = СтрРекГруппы + Рек.Имя + ",";
		КонецЕсли;
	КонецЦикла;
	СтрРеквизитов.Вставить(Истина, Лев(СтрРекГруппы  ,СтрДлина(СтрРекГруппы)   - 1));
	СтрРеквизитов.Вставить(Ложь  , Лев(СтрРекЭлемента,СтрДлина(СтрРекЭлемента) - 1));
	
	#КонецОбласти
	
	КоличествоОшибок = 0;
	ТЗ = ЭлСтр; //Таблица данных
	Для Каждого Стр Из ТЗ Цикл
		Попытка
			ЭтоГруппа = Ложь;
			Если ТЗ.Колонки.Найти("ЭтоГруппа") <> Неопределено Тогда
				ЭтоГруппа = Стр.ЭтоГруппа;
			КонецЕсли;
			Нов = Стр.Ссылка.ПолучитьОбъект();
			Если Нов = Неопределено Тогда
				Нов = ?(НЕ этоГруппа,Справочники[ТипСпр.Имя].СоздатьЭлемент(), Справочники[ТипСпр.Имя].СоздатьГруппу());
				Нов.УстановитьСсылкуНового(Стр.Ссылка);
			КонецЕсли;	
			ЗаполнитьЗначенияСвойств(Нов,Стр,СтрРеквизитов.Получить(ЭтоГруппа));
			Для Каждого Таб Из ТипСпр.ТабличныеЧасти Цикл
				Если ТЗ.Колонки.Найти(Таб.Имя) = Неопределено Тогда Продолжить КонецЕсли;
				Если Стр[Таб.Имя].Количество() = 0 Тогда Продолжить КонецЕсли;
				Нов[Таб.Имя].Загрузить(Стр[Таб.Имя]);
			КонецЦикла;
			Нов.ОбменДанными.Загрузка = Истина;
			//Нов.ОбменДанными.Отправитель = УзелРодитель;
			Нов.Записать();
			
		Исключение
			КоличествоОшибок = КоличествоОшибок + 1;
			//ЗаписьЖурналаРегистрации("Загрузка справочникиов",УровеньЖурналаРегистрации.Ошибка,,,"" + ТипСпр + " " + ОписаниеОшибки());
		КонецПопытки;		
	КонецЦикла;
	Возврат КоличествоОшибок;
КонецФункции
Функция ЗагрузкаДокументов(ТЗ,ТипДанных,УзелРодитель = Неопределено)
	КоличествоОшибок = 0;
	
	Для Каждого Стр Из ТЗ Цикл
		Попытка
			Нов = Стр.Ссылка.ПолучитьОбъект();
			Если Нов = Неопределено Тогда
				Если Стр.ПометкаУдаления Тогда Продолжить КонецЕсли; //Пропускаем документы, которые помечены и ранее тут не были созданы
				Нов = Документы[ТипДанных.Имя].СоздатьДокумент();
				Нов.УстановитьСсылкуНового(Стр.Ссылка);
			КонецЕсли;	
			ЗаполнитьЗначенияСвойств(Нов,Стр,,"Ссылка");
			
			Для Каждого Таб Из ТипДанных.ТабличныеЧасти Цикл
				Если ТЗ.Колонки.Найти(Таб.Имя) = Неопределено Тогда Продолжить КонецЕсли;
				Нов[Таб.Имя].Загрузить(Стр[Таб.Имя]);
			КонецЦикла;
			//Нов.ОбменДанными.Отправитель = УзелРодитель;  
			Нов.ОбменДанными.Загрузка = Истина;
			Если УзелРодитель.НомерПринятого > 0 Тогда
				Нов.ДатаОбновления = ТекущаяДата();
			Иначе
				Нов.ДатаОбновления = НачалоДня(ТекущаяДата()) - 1;
			КонецЕсли;
			Нов.Записать();	
		Исключение
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецПопытки;
	КонецЦикла;
	Возврат КоличествоОшибок;
КонецФункции

